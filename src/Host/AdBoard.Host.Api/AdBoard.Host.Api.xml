<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AdBoard.Host.Api</name>
    </assembly>
    <members>
        <member name="T:AdBoard.Host.Api.Controllers.AdvertController">
            <summary>
            Контроллер для работы с объявлениями
            </summary>
            <response code="500"> Произошла внутрення ошибка </response>
        </member>
        <member name="M:AdBoard.Host.Api.Controllers.AdvertController.#ctor(Microsoft.Extensions.Logging.ILogger{AdBoard.Host.Api.Controllers.AdvertController},AdBoard.Application.AppData.Contexts.Advert.Services.IAdvertService,AdBoard.Application.AppData.Contexts.Comment.Services.ICommentService)">
            <summary>
            Инициализирует экземпляр <see cref="T:AdBoard.Host.Api.Controllers.AdvertController"/>
            </summary>
            <param name="logger">Логгер</param>
            <param name="service">Сервис для работы с <see cref="T:AdBoard.Domain.Advert.Advert"/></param>
            <param name="commentService">Сервис дял работы с комментариями</param>
        </member>
        <member name="M:AdBoard.Host.Api.Controllers.AdvertController.GetAll(AdBoard.Contracts.Advert.AdvertSearchRequestDto,System.Threading.CancellationToken)">
            <summary>
            Получить список объявлений
            </summary>
            <param name="request">Детали запроса</param>
            <param name="cancellationToken">Токен отмены</param>
            <response code="200">Запрос выполнен успешно</response>
            <returns>Список моделей объявления <see cref="T:AdBoard.Contracts.Advert.ShortAdvertDto"/></returns>
        </member>
        <member name="M:AdBoard.Host.Api.Controllers.AdvertController.GetById(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Получить объявление по id
            </summary>
            <param name="id">Идентификатор объявления</param>
            <param name="cancellationToken">Токен отмены</param>
            <response code="200">Запрос выполнен успешно</response>
            <response code="404">Объявление с таким id не найдено</response>
            <returns>Модель объявления <see cref="T:AdBoard.Contracts.Advert.AdvertDto"/></returns>
        </member>
        <member name="M:AdBoard.Host.Api.Controllers.AdvertController.GetAllComments(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Получить список комментариев объявления
            </summary>
            <param name="id">Идентификатор объявления</param>
            <param name="cancellationToken">Токен отмены</param>
            <response code="200">Запрос выполнен успешно</response>
            <returns>Список моделей комментариев <see cref="T:AdBoard.Contracts.Comment.ShortCommentDto"/></returns>
        </member>
        <member name="M:AdBoard.Host.Api.Controllers.AdvertController.CreateComment(System.Guid,AdBoard.Contracts.Comment.CreateCommentDto,System.Threading.CancellationToken)">
            <summary>
            Создаёт комментарий по модели в объявлении
            </summary>
            <param name="id">Идентификатор объявления</param>
            <param name="dto">Модель для создания комментария</param>
            <param name="cancellationToken">Токен отмены</param>
            <response code="201">Успешно создано</response>
            <response code="400">Модель данных запроса невалидна</response>
            <response code="422">Произошёл конфликт бизнес логики</response>
            <returns>Модель созданного комментария <see cref="T:AdBoard.Contracts.Comment.ShortCommentDto"/></returns>
        </member>
        <member name="M:AdBoard.Host.Api.Controllers.AdvertController.Create(AdBoard.Contracts.Advert.CreateAdvertDto,System.Threading.CancellationToken)">
            <summary>
            Создаёт объявление по модели
            </summary>
            <param name="dto">Модель для создания объявления</param>
            <param name="cancellationToken">Токен отмены</param>
            <response code="201">Объявление успешно создано</response>
            <response code="400">Модель данных запроса невалидна</response>
            <response code="422">Произошёл конфликт бизнес логики</response>
            <returns>Модель созданного объявления <see cref="T:AdBoard.Contracts.Advert.ShortAdvertDto"/></returns>
        </member>
        <member name="M:AdBoard.Host.Api.Controllers.AdvertController.Update(System.Guid,AdBoard.Contracts.Advert.UpdateAdvertDto,System.Threading.CancellationToken)">
            <summary>
            Обновляет объявление по модели
            </summary>
            <param name="id">Идентификатор обновляемого объявления</param>
            <param name="dto">Модель объявления</param>
            <param name="cancellationToken">Токен отмены</param>
            <response code="200">Запрос успешно выполнен</response>
            <response code="400">Модель невалидна</response>
            <response code="403">Доступ запрещен</response>
            <response code="404">Объявление не найдено</response>
            <response code="422">Конфликт бизнес логики</response>
            <returns>Модель обновленного объявления <see cref="T:AdBoard.Contracts.Advert.ShortAdvertDto"/></returns>
        </member>
        <member name="M:AdBoard.Host.Api.Controllers.AdvertController.Delete(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Удаляет объявление по ID
            </summary>
            <param name="id">Идентификатор объявления</param>
            <param name="cancellationToken">Токен отмены</param>
            <response code="204">Удаление произведено успешно</response>
            <response code="403">Нет доступа</response>
            <response code="404">Объявление с таким ID не найдено</response>
        </member>
        <member name="T:AdBoard.Host.Api.Controllers.AuthorizationController">
            <summary>
            Контроллер для авторизации и регистрации
            </summary>
            <response code="500"> Произошла внутрення ошибка </response>
        </member>
        <member name="M:AdBoard.Host.Api.Controllers.AuthorizationController.#ctor(AdBoard.Application.AppData.Contexts.Authentication.Services.IAuthenticationService)">
            <summary>
            Инициализирует контроллер
            </summary>
            <param name="authenticationService">Сервис аутентификации</param>
        </member>
        <member name="M:AdBoard.Host.Api.Controllers.AuthorizationController.Login(AdBoard.Contracts.User.LoginUserDto,System.Threading.CancellationToken)">
            <summary>
            Аутентифицирует пользователя
            </summary>
            <param name="dto">Модель для аутентификации</param>
            <response code="200">Запрос выполнен успешно</response>
            <response code="400">Модель данных не валидна</response>
            <param name="cancellationToken">Токен отмены</param>
            <returns>JWT токен</returns>
        </member>
        <member name="M:AdBoard.Host.Api.Controllers.AuthorizationController.Register(AdBoard.Contracts.User.CreateUserDto,System.Threading.CancellationToken)">
            <summary>
            Создаёт пользователя
            </summary>
            <param name="dto">Модель пользователя</param>
            <param name="cancellationToken">Токен отмены</param>
            <response code="202">Создание выполнено успешно</response>
            <response code="400">Модель данных не валидна</response>
            <returns>ID созданного пользователя</returns>
        </member>
        <member name="T:AdBoard.Host.Api.Controllers.CategoriesController">
            <summary>
            Контроллер для работы с категориями
            </summary>
            <response code="500">Произошла внутрення ошибка</response>
        </member>
        <member name="M:AdBoard.Host.Api.Controllers.CategoriesController.#ctor(AdBoard.Application.AppData.Contexts.Category.Services.ICategoryService,Microsoft.Extensions.Logging.ILogger{AdBoard.Host.Api.Controllers.CategoriesController})">
            <summary>
            Инициализирует контроллер
            </summary>
            <param name="service">Сервис по работе с категориями</param>
            <param name="logger">Логгер</param>
        </member>
        <member name="M:AdBoard.Host.Api.Controllers.CategoriesController.GetAll(System.Threading.CancellationToken)">
            <summary>
            Вернуть все категории
            </summary>
            <param name="cancellationToken">Токен отмены</param>
            <response code="200">Запрос выполнен успешно</response>
            <returns>Список категорий</returns>
        </member>
        <member name="M:AdBoard.Host.Api.Controllers.CategoriesController.GetById(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Получить категорию по id
            </summary>
            <param name="id">Идентификатор категории</param>
            <param name="cancellationToken">Токен отмены</param>
            <response code="200">Запрос выполнен успешно</response>
            <response code="404">Категория с таким id не найдена</response>
            <returns>Модель категории <see cref="T:AdBoard.Contracts.Category.CategoryDto"/></returns>
        </member>
        <member name="M:AdBoard.Host.Api.Controllers.CategoriesController.Create(AdBoard.Contracts.Category.CreateCategoryDto,System.Threading.CancellationToken)">
            <summary>
            Создаёт категорию по модели
            </summary>
            <param name="dto">Модель для создания категории</param>
            <param name="cancellationToken">Токен отмены</param>
            <response code="201">Категория успешно создана</response>
            <response code="400">Модель данных запроса невалидна</response>
            <response code="403">Недостаточно прав для создания категории</response>
            <response code="422">Произошёл конфликт бизнес логики</response>
            <returns>Модель созданной категории <see cref="T:AdBoard.Contracts.Category.ShortCategoryDto"/></returns>
        </member>
        <member name="M:AdBoard.Host.Api.Controllers.CategoriesController.Import(System.Collections.Generic.IEnumerable{AdBoard.Contracts.Category.ImportCategoryDto},System.Threading.CancellationToken)">
            <summary>
            Импортирует категории из JSON списка.
            </summary>
            <param name="importCategories">Коллекция категорий.</param>
            <param name="cancellationToken">Токен отмены.</param>
            <response code="200">Категории успешно импортированы.</response>
            <response code="422">Произошёл конфликт бизнес логики.</response>
        </member>
        <member name="M:AdBoard.Host.Api.Controllers.CategoriesController.Update(System.Guid,AdBoard.Contracts.Category.UpdateCategoryDto,System.Threading.CancellationToken)">
            <summary>
            Обновляет категорию по модели
            </summary>
            <param name="id">Идентификатор обновляемой категории</param>
            <param name="dto">Модель категории</param>
            <param name="cancellationToken">Токен отмены</param>
            <response code="200">Запрос успешно выполнен</response>
            <response code="400">Модель невалидна</response>
            <response code="403">Доступ запрещен</response>
            <response code="404">Категория не найдена</response>
            <response code="422">Конфликт бизнес логики</response>
            <returns>Модель обновленной категории <see cref="T:AdBoard.Contracts.Category.ShortCategoryDto"/></returns>
        </member>
        <member name="M:AdBoard.Host.Api.Controllers.CategoriesController.Delete(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Удаляет категорию по ID
            </summary>
            <param name="id">Идентификатор категории</param>
            <param name="cancellationToken">Токен отмены</param>
            <response code="204">Удаление произведено успешно</response>
            <response code="403">Нет доступа</response>
            <response code="404">Категория с таким ID не найдена</response>
        </member>
        <member name="T:AdBoard.Host.Api.Controllers.CommentController">
            <summary>
            Контроллер для работы с комментариями
            </summary>
            <response code="500"> Произошла внутрення ошибка </response>
        </member>
        <member name="M:AdBoard.Host.Api.Controllers.CommentController.#ctor(AdBoard.Application.AppData.Contexts.Comment.Services.ICommentService)">
            <summary>
            Контроллер для работы с комментариями
            </summary>
            <param name="commentService"></param>
        </member>
        <member name="M:AdBoard.Host.Api.Controllers.CommentController.GetById(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Получить комментарий по id
            </summary>
            <param name="id">Идентификатор</param>
            <param name="cancellationToken">Токен отмены</param>
            <response code="200">Запрос выполнен успешно</response>
            <response code="404">Комментарий с таким id не найден</response>
            <returns>Модель комментария <see cref="T:AdBoard.Contracts.Comment.CommentDto"/></returns>
        </member>
        <member name="M:AdBoard.Host.Api.Controllers.CommentController.Update(System.Guid,AdBoard.Contracts.Comment.UpdateCommentDto,System.Threading.CancellationToken)">
            <summary>
            Обновляет комментарий по модели
            </summary>
            <param name="id">Идентификатор комментария</param>
            <param name="model">Модель</param>
            <param name="cancellationToken">Токен отмены</param>
            <response code="200">Запрос успешно выполнен</response>
            <response code="400">Модель невалидна</response>
            <response code="403">Доступ запрещен</response>
            <response code="404">Комментарий не найден</response>
            <response code="422">Конфликт бизнес логики</response>
            <returns>Модель обновленного комментария <see cref="T:AdBoard.Contracts.Comment.ShortCommentDto"/></returns>
        </member>
        <member name="M:AdBoard.Host.Api.Controllers.CommentController.Delete(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Удаляет комментарий по ID
            </summary>
            <param name="id">Идентификатор</param>
            <param name="cancellationToken">Токен отмены</param>
            <response code="204">Удаление произведено успешно</response>
            <response code="403">Нет доступа</response>
            <response code="404">Комментария с таким ID не найдено</response>
        </member>
        <member name="T:AdBoard.Host.Api.Controllers.ImagesController">
            <summary>
            Контроллер для работы с <see cref="T:AdBoard.Domain.Image.Image"/>
            </summary>
            <response code="500">Произошла внутрення ошибка</response> 
        </member>
        <member name="M:AdBoard.Host.Api.Controllers.ImagesController.#ctor(AdBoard.Application.AppData.Contexts.Image.Services.IImageService,Microsoft.Extensions.Logging.ILogger{AdBoard.Host.Api.Controllers.ImagesController})">
            <summary>
            Инициализирует контроллер <see cref="T:AdBoard.Domain.Image.Image"/>
            </summary>
            <param name="service">Сервис для работы с изображениями</param>
            <param name="logger">Логгер</param>
        </member>
        <member name="M:AdBoard.Host.Api.Controllers.ImagesController.GetById(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Получить изображение по id
            </summary>
            <param name="id">Идентификатор изображения</param>
            <param name="cancellationToken">Токен отмены</param>
            <response code="200">Запрос выполнен успешно</response>
            <response code="404">Изображение с таким id не найдено</response>
            <returns>Модель изображения <see cref="T:AdBoard.Contracts.Image.ImageDto"/></returns>
        </member>
        <member name="M:AdBoard.Host.Api.Controllers.ImagesController.Create(AdBoard.Contracts.Image.CreateImageDto,System.Threading.CancellationToken)">
            <summary>
            Создаёт изображение по модели
            </summary>
            <param name="dto">Модель для создания изображения</param>
            <param name="cancellationToken">Токен отмены</param>
            <response code="201">Изображение успешно создано</response>
            <response code="400">Модель данных запроса невалидна</response>
            <response code="403">Недостаточно прав доступа к изображению</response>
            <response code="422">Произошёл конфликт бизнес логики</response>
            <returns>Модель созданного изображения <see cref="T:AdBoard.Contracts.Image.ShortImageDto"/></returns>
        </member>
        <member name="M:AdBoard.Host.Api.Controllers.ImagesController.Delete(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Удаляет изображение по ID
            </summary>
            <param name="id">Идентификатор изображения</param>
            <param name="cancellationToken">Токен отмены</param>
            <response code="204">Удаление произведено успешно</response>
            <response code="403">Нет доступа</response>
            <response code="404">Изображение с таким ID не найден</response>
        </member>
        <member name="T:AdBoard.Host.Api.Controllers.UsersController">
            <summary>
            Контроллер для работы с <see cref="T:AdBoard.Domain.User.User"/>
            </summary>
            <response code="500">Произошла внутрення ошибка</response> 
        </member>
        <member name="M:AdBoard.Host.Api.Controllers.UsersController.#ctor(AdBoard.Application.AppData.Contexts.Advert.Services.IUserService,Microsoft.Extensions.Logging.ILogger{AdBoard.Host.Api.Controllers.UsersController})">
            <summary>
            Инициализирует контроллер <see cref="T:AdBoard.Domain.User.User"/>
            </summary>
            <param name="service">Сервис для работы с пользователями</param>
            <param name="logger">Логгер</param>
        </member>
        <member name="M:AdBoard.Host.Api.Controllers.UsersController.GetAll(System.Threading.CancellationToken)">
            <summary>
            Вернуть всех пользователей
            </summary>
            <param name="cancellationToken">Токен отмены</param>
            <response code="200">Запрос выполнен успешно</response>
            <response code="403">Доступ запрещен</response>
            <returns>Список пользователи</returns>
        </member>
        <member name="M:AdBoard.Host.Api.Controllers.UsersController.GetById(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Получить пользователя по id
            </summary>
            <param name="id">Идентификатор пользователя</param>
            <param name="cancellationToken">Токен отмены</param>
            <response code="200">Запрос выполнен успешно</response>
            <response code="404">Пользователь с таким id не найден</response>
            <returns>Модель пользователя <see cref="T:AdBoard.Contracts.User.UserDto"/></returns>
        </member>
        <member name="M:AdBoard.Host.Api.Controllers.UsersController.GetCurrentUser(System.Threading.CancellationToken)">
            <summary>
            Получить текущего пользователя
            </summary>
            <param name="cancellationToken"></param>
            <response code="200">Запрос выполнен успешно</response>
            <response code="403">Доступ запрещен</response>
            <returns>Текущий пользователь</returns>
        </member>
        <member name="M:AdBoard.Host.Api.Controllers.UsersController.Update(System.Guid,AdBoard.Contracts.User.UpdateUserDto,System.Threading.CancellationToken)">
            <summary>
            Обновляет пользователя по модели
            </summary>
            <param name="id">Идентификатор обновляемого пользователя</param>
            <param name="dto">Модель пользователя</param>
            <param name="cancellationToken">Токен отмены</param>
            <response code="200">Запрос успешно выполнен</response>
            <response code="400">Модель невалидна</response>
            <response code="403">Доступ запрещен</response>
            <response code="404">Пользователь не найден</response>
            <response code="422">Конфликт бизнес логики</response>
            <returns>Модель обновленного пользователя <see cref="T:AdBoard.Contracts.User.ShortUserDto"/></returns>
        </member>
        <member name="M:AdBoard.Host.Api.Controllers.UsersController.Delete(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Удаляет пользователя по ID
            </summary>
            <param name="id">Идентификатор пользователя</param>
            <param name="cancellationToken">Токен отмены</param>
            <response code="204">Удаление произведено успешно</response>
            <response code="403">Нет доступа</response>
            <response code="404">Пользователь с таким ID не найден</response>
        </member>
        <member name="T:AdBoard.Host.Api.ExtensionMethods">
            <summary>
            Методы расширения для класса Program
            </summary>
        </member>
        <member name="M:AdBoard.Host.Api.ExtensionMethods.AddServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Добавить сервисы в DI
            </summary>
            <param name="serviceCollection">Сервисы программы</param>
        </member>
        <member name="M:AdBoard.Host.Api.ExtensionMethods.AddRepositories(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Добавить репозитории в DI
            </summary>
            <param name="serviceCollection">Сервисы программы</param>
        </member>
        <member name="M:AdBoard.Host.Api.ExtensionMethods.AddDbContextWithConfigurations(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Добавить DbContext с конфигурациями в DI
            </summary>
            <param name="serviceCollection">Сервисы программы</param>
        </member>
        <member name="M:AdBoard.Host.Api.ExtensionMethods.AddJwtAuthenticationWithOptions(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Добавляет и настраивает аутентификацию на основе JWT токенов
            </summary>
            <param name="services">Сервис провайдер</param>
        </member>
    </members>
</doc>
